server:
  port: 8090

spring:
  application:
    name: loans
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
  profiles:
    active: "prod"
  config: # We need to communicate to loans microservice about the endpoint details of config server.
    import: "optional:configserver:http://localhost:8071/" # configserver in here is an indication to loans microservice that it is going to connect with the config server, do not confuse with the name of the config server we have chosen.
  # This is for refreshing configurations at runtime using Spring Cloud Bus
  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"

# To enable the actuator API paths. By default, Actuator is not going to expose all the management related API paths. That's why we need to specifically enable them.
management:
  endpoints:
    web:
      exposure:
        include: "*" # means please enable and expose all management endpoint supported by the Spring Boot Actuator.
  endpoint: # to manually shutdown the microservice to see the service deregistration.
    shutdown:
      enabled: true
  info:
    env:
      enabled: true

endpoints: # To enable the endpoints related to shutdown of a microservice
  shutdown:
    enabled: true


eureka:
  instance:
    prefer-ip-address: true # Whenever my loan microservice is trying to register with the Eureka server, by default it will try to register with the host name. The host names will make sense whenever you use DNS mappings inside your microservices network. But, inside our local system we do not have any DNS mapping setup, so we should use prefer IP address as true so that my account microservice will register with my Eureka server by using the IP address.
  client:
    fetch-registry: true # our loan microservice will try to fetch the registry details whenever it is trying to connect with other microservices.
    register-with-eureka: true # since we want our loan microservice to be registered with the Eureka server
    service-url:
      defaultZone: http://localhost:8070/eureka/

# The purpose of why we added these info related information is the same information we can see inside the Eureka dashboard.
info:
  app:
    name: "loans"
    description: "DekanBANK loan application"
    version: "1.0.0"
