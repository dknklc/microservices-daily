server:
  port: 8080

spring:
  application:
    name: accounts
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
  profiles:
    active: "prod"
  config: # We need to communicate to accounts microservice about the endpoint details of config server.
    import: "optional:configserver:http://localhost:8071/" # configserver in here is an indication to accounts microservice that it is going to connect with the config server, do not confuse with the name of the config server we have chosen.
  # This is for refreshing configurations at runtime using Spring Cloud Bus
  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"
  cloud: # We have activated circuit breaker for all the openfeign clients inside the account microservice.
    openfeign:
      circuitbreaker:
        enabled: true


# This is for refreshing configurations at runtime using refresh actuator path
# To enable the actuator API paths. By default, Actuator is not going to expose all the management related API paths. That's why we need to specifically enable them.
management:
  endpoints:
    web:
      exposure:
        include: "*" # means please enable and expose all management endpoint supported by the Spring Boot Actuator.
  health: # To enable and expose the health related information
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint: # to manually shutdown the microservice to see the service deregistration.
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true

endpoints: # To enable the endpoints related to shutdown of a microservice
  shutdown:
    enabled: true

eureka:
  instance:
    prefer-ip-address: true # Whenever my account microservice is trying to register with the Eureka server, by default it will try to register with the host name. The host names will make sense whenever you use DNS mappings inside your microservices network. But, inside our local system we do not have any DNS mapping setup, so we should use prefer IP address as true so that my account microservice will register with my Eureka server by using the IP address.
  client:
    fetch-registry: true # our account microservice will try to fetch the registry details whenever it is trying to connect with other microservices.
    register-with-eureka: true # since we want our account microservice to be registered with the Eureka server
    service-url:
      defaultZone: http://localhost:8070/eureka/

# The purpose of why we added these info related information is the same information we can see inside the Eureka dashboard.
info:
  app:
    name: "accounts"
    description: "DekanBANK account application"
    version: "1.0.0"


logging:
  level:
    com:
      dekankilic:
        accounts: debug

# Circuit breaker related configurations
resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10 # Using this property, we are communicating to the circuit breaker pattern on how many requests it has to initially monitor before it tries to change the status from close to open. Please monitor at least 10 requests coming towards my account microservice
      permittedNumberOfCallsInHalfOpenState: 2 # In the half_open state, 2 request will be allowed to request.
      failureRateThreshold: 50 # If at least 50% of the requests are failed, then circuit breaker pattern can move to the open state from the close state.
      waitDurationInOpenState: 10000 # My circuit breaker pattern is going to wait 10s whenever it tries to move the half_open state and allow the partial traffic.

# Retry related configurations
resilience4j.retry:
    configs:
      default:
        max-attempts: 3
        wait-duration: 100
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
        ignore-exceptions: # I have configured saying that please ignore the exception of type NullPointerException, and do not retry the request.
          - java.lang.NullPointerException
        retry-exceptions: # Please retry the request only in the scenario of TimeoutException.
          - java.util.concurrent.TimeoutException

# RateLimiter related configurations
resilience4j.ratelimiter:
  configs:
    default:
      timeout-duration: 1000
      limit-refresh-period: 5000 # Every 5 seconds, I want to renew the quota.
      limit-for-period: 1 # For Every 5 seconds, I have configured only one request is allowed.





